[ { "title": "Shell 常用参数", "url": "/posts/shell-common-parameters/", "categories": "Linux", "tags": "shell", "date": "2022-02-22 22:02:22 +0800", "snippet": "举例说明 $0 第 0 个参数，即脚本名称 $n 第 n 个参数 $# 参数个数 $@ 所有参数(每个都作为独立的字符串) $* 所有参数(作为一个字符串) ，用的不如 $@ 多 ${#@} 传递到脚本中的命令行参数的个数 ${#*} 传递到脚本中的命令行参数的个数 $? 命令执行完的返回值，0 成功，非 0 失败 $$ 脚本的进程 ID，即 PID $_ 之前命令的最后一个参数 $! 运行在后台的最后一个作业的进程 ID(PID) " }, { "title": "Linux 获取文件名和后缀", "url": "/posts/get-filename-and-suffix/", "categories": "Linux", "tags": "文件名", "date": "2022-02-12 22:02:12 +0800", "snippet": "举例说明filename=\"this.is.a.sample.txt\" 命令 结果 ${filename%*.} this.is.a.sample (从右向左删除第一个点右边的，非贪婪模式) ${filename%%*.} this (从右向左删除最后一个点右边的，贪婪模式) ${filenam#*.} is.a.sample.txt (从左向右删除第一个点左边的，非贪婪模式) ${filenam##*.} txt (从左向右删除最后一个点左边的，贪婪模式) " }, { "title": "Wget 命令", "url": "/posts/wget-command/", "categories": "Linux", "tags": "wget", "date": "2022-01-31 22:01:31 +0800", "snippet": "命令格式wget &lt;选项&gt; url常用命令选项 命令选项 解释说明 -c 继续执行上次终端的任务 -i &lt;文件&gt; 从指定文件获取要下载的 URL 地址 -r 递归下载 -nc 文件存在时，下载文件不覆盖原有文件 -nv 下载时只显示更新和出错信息，不显示指令的详细执行过程 -b 以后台方式运行 -q 不显示指令执行过程 -O 重命名下载文件 --reject=jpg 过滤掉 jpg 文件，不下载 jpg --limit-rate 512k 限速最高512k -A &lt;后缀名&gt; 指定要下载文件的后缀名，多个后缀名之间使用逗号进行分割 -e &lt;指令&gt; 作为文件 “.wgetrc” 中的一部分执行指定的指令 -h 显示帮助信息 -L 仅顺着关联的连接 -nh 不查询主机名称 -v 显示详细执行过程 常用命令举例 将下载文件重命名为 hello.zip wget -O hello.zip http://www.xxx.com/download.aspx?id=9468 wget 默认保存文件名是最后一个 / 后的部分，上面的连接如果不使用 -O 重命名的话，下载的文件就会保存为 download.aspx?id=9468 伪装代理下载 wget --user-agent=”Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.204 Safari/534.16” http://pythonista.cn/testwget.zip 有些网站能通过根据判断代理名称不是浏览器而拒绝下载请求，可以使用 –user-agent 伪装 镜像网站 wget --mirror -p --convert-links -P /home http://pythonista.cn 说明： --miror 开户镜像下载 -p 下载所有为了html页面显示正常的文件 --convert-links 下载后，转换成本地的链接 -P home 保存所有文件和目录到本地 /home 目录中 下载指定的文件格式 wget -r -A.pdf url 递归下载所有的 pdf 文件 下载信息不显示在终端而是在一个日志文件 wget -o download.log URL 限制总下载大小 wget -Q5m -i filelist.txt 当想要下载的文件超过5M而退出下载时使用。注意：这个参数对单个文件下载不起作用，只能递归下载时才有效 " }, { "title": "Tar 命令", "url": "/posts/tar-command/", "categories": "Linux", "tags": "tar", "date": "2022-01-18 22:01:18 +0800", "snippet": "常用命令选项 命令选项 解释说明 -c 或 –create 建立新的备份文件 -C &lt;目录&gt; 解压到指定目录 -x 或 –extract 或 –get 从备份文件中还原文件 -t 或 –list 列出备份文件的内容 -z 或 –gzip 或 –ungzip 通过 gzip 指令处理备份文件 -f &lt;备份文件&gt; 或 –file=&lt;备份文件&gt; 指定备份文件 -j 支持 bzip2 解压文件 -p 或 –same-permissions 用原来的文件权限还原文件 -r 添加文件到已经压缩的文件 -A 将一个备份文件追加到另一个备份文件的后面 -d 记录文件的差别 -v 或 –verbose 显示指令执行过程 -u 添加改变了和现有的文件到已经存在的压缩文件 -k 保留原有文件不覆盖 -w 确认压缩文件的正确性 -P 或 –absolute-names 文件名使用绝对名称，不移除文件名称前的“/”号 -N &lt;日期格式&gt; 或 –newer=&lt;日期时间&gt; 只将较指定日期更新的文件保存到备份文件里 –exclude=&lt;范本样式&gt; 排除符合范本样式的文件 常用命令举例压　缩：tar -jcv -f filename.tar.bz2 要被压缩的文件或目录名称解压缩：tar -jxv -f filename.tar.bz2 -C 欲解压缩的目录查　询：tar -jtv -f filename.tar.bz2只将tar内的部分文件解压出来：tar -zxvf test/log.tar.gz log.log" }, { "title": "Python 有序字典 OrderedDict", "url": "/posts/python-ordereddict/", "categories": "Python", "tags": "OrderedDict", "date": "2022-01-11 22:22:22 +0800", "snippet": "from collections import OrderedDictd = OrderedDict()d['foo'] = 1d['bar'] = 2d['spam'] = 3d['grok'] = 4# Outputs \"foo 1\", \"bar 2\", \"spam 3\", \"grok 4\"for key in d: print(key, d[key]) # 要构建一个需要序列化或编码成其他格式的映射的时候，OrderedDict 是非常有用import jsonjson.dumps(d) # '{\"foo\": 1, \"bar\": 2, \"spam\": 3, \"grok\": 4}'注意： OrderedDict 内部维护着一个根据键插入顺序排序的双向链表。每次当一个新的元素插入进来的时候，它会被放到链表的尾部。对于一个已经存在的键的重复赋值不会改变键的顺序。需要注意的是，一个 OrderedDict 的大小是一个普通字典的两倍，因为它内部维护着另外一个链表，所以使用（尤其是数据太大）时有必要考虑内存消耗的问题。" }, { "title": "Python 命名元组 namedtuple", "url": "/posts/python-namedtuple/", "categories": "Python", "tags": "namedtuple", "date": "2021-12-31 12:31:12 +0800", "snippet": "原型collections.namedtuple(typename, field_names, *, rename=False, defaults=None, module=None)其中：typename：创建的子类类名field_names：字符串序列，类似字典中的key，通过它操作命名元组。可以是list，如['name', 'price']，也可以是逗号或者空格分割的字符串，如 'name, price' 或者 'name price'。*：python函数参数单独一个星号表示星号后面的所有参数都只能以关键参数的形式进行传值，不接收其他任何形式的传值。rename：默认 false，如果 rename=True，那么无效的字段名会被替换为 '_索引值'。比如 ['abc', 'def', 'ghi', 'abc'] 会被转换成 ['abc', '_1', 'ghi', '_3']，其中与关键字重名的 'def' 和重复的 'abc' 都被替换成了 '_索引值'。defaults：默认 None，按 field_names 中的名字一次赋默认值。module：定义类的模块名举例from collections import namedtuplePoint = namedtuple('Point', ['x', 'y'])# 通过位置参数或者关键字参数实例化p = Point(11, y=22)# 索引取值或命名取值print(p[0] + p.y)# 像普通元组一样解包x, y = pprint(x, y)其他方法命名元组独有的方法都以下划线开头# _make 通过序列或者可迭代对象实例化t = [11, 22]print(Point._make(t))# _asdict 返回有序字典 OrderedDictp = Point(11, 22)print(p._asdict())# _replace 接收关键字参数，给指定的字段重新赋值，返回新的命名元组，但不改变原来的命名元组p = Point(11, 22)new_p = p._replace(x=33)# _fields 返回字段名print(p._fields)# 可以用和命名元组字段同名的字典生成命名元组d = {'x': 11, 'y': 22}p = Point(**d)" }, { "title": "无向图中的所有连通分量", "url": "/posts/all-connected-components-in-undirected-graphs/", "categories": "算法", "tags": "无向图, 连通分量", "date": "2021-12-23 12:23:34 +0800", "snippet": "#include &lt;map&gt;#include &lt;list&gt;#include &lt;vector&gt;using namespace std;int merge(vector&lt;int&gt; parent, int x){ if (parent[x] == x) { return x; } return merge(parent, parent[x]);}vector&lt;vector&lt;int&gt;&gt; connected_components(int n, vector&lt;pair&lt;int, int&gt;&gt; &amp;edges){ vector&lt;int&gt; parent; vector&lt;vector&lt;int&gt;&gt; result; for (int i = 0; i &lt; n; i++) { parent.push_back(i); } for (const auto &amp;x : edges) { parent[merge(parent, x.first)] = merge(parent, x.second); } for (int i = 0; i &lt; n; i++) { parent[i] = merge(parent, parent[i]); } map&lt;int, list&lt;int&gt;&gt; m; for (int i = 0; i &lt; n; i++) { m[parent[i]].push_back(i); } for (auto it = m.begin(); it != m.end(); it++) { list&lt;int&gt; l = it-&gt;second; vector&lt;int&gt; temp; for (const auto &amp;x : l) { temp.push_back(x); } result.push_back(temp); } return result;}" }, { "title": "三维空间点到线的距离", "url": "/posts/distance-from-point-to-line/", "categories": "算法", "tags": "距离", "date": "2021-12-12 12:12:12 +0800", "snippet": "#include &lt;cmath&gt;struct Point{ float x; float y; float z; Point(float x_, float y_, float z_) { x = x_; y = y_; z = z_; } float Dot(const Point &amp;p) const { return x * p.x + y * p.y + z * p.z; } Point operator-(const Point &amp;p) const { return Point(x - p.x, y - p.y, z - p.z); }};bool IsPointInLinePlane(const Point &amp;a, const Point &amp;b, const Point &amp;p){ Point ba = a - b; Point pa = a - p; Point bp = p - b; return ba.Dot(pa) &lt; 0 ? false : ba.Dot(bp) &gt; 0;}float DistanceOfPointToLine(const Point &amp;a, const Point &amp;b, const Point &amp;s){ float ab = sqrt(pow((a.x - b.x), 2) + pow((a.y - b.y), 2) + pow((a.z - b.z), 2)); float as = sqrt(pow((a.x - s.x), 2) + pow((a.y - s.y), 2) + pow((a.z - s.z), 2)); float bs = sqrt(pow((s.x - b.x), 2) + pow((s.y - b.y), 2) + pow((s.z - b.z), 2)); if (IsPointInLinePlane(a, b, s)) { float cos_A = (pow(as, 2) + pow(ab, 2) - pow(bs, 2)) / (2 * ab * as); float sin_A = sqrt(1 - pow(cos_A, 2)); return as * sin_A; } return as &lt; bs ? as : bs;}" }, { "title": "C++ 将指针 delete 后要置为 null", "url": "/posts/cpp-set-pointer-null-after-delete/", "categories": "C++", "tags": "指针", "date": "2021-11-23 11:23:45 +0800", "snippet": "直接看例子：#include &lt;iostream&gt;using namespace std;int main(){ int* p = new int(9); cout &lt;&lt; \"Before Delete P:\" &lt;&lt; endl; cout &lt;&lt; \"The Pointer Address Is: \" &lt;&lt; p &lt;&lt; endl; cout &lt;&lt; \"The Value That P Point Is: \" &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; \"=================================\" &lt;&lt; endl; delete p; cout &lt;&lt; \"After Delete P:\" &lt;&lt; endl; cout &lt;&lt; \"The Pointer Address Is: \" &lt;&lt; p &lt;&lt; endl; cout &lt;&lt; \"The Value That P Point Is: \" &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; \"=================================\" &lt;&lt; endl; cout &lt;&lt; \"Create A New Poniter:\" &lt;&lt; endl; int* newP = new int(8); cout &lt;&lt; \"The New Pointer Address Is: \" &lt;&lt; newP &lt;&lt; endl; cout &lt;&lt; \"The Value That newp Point Is: \" &lt;&lt; *newP &lt;&lt; endl; cout &lt;&lt; \"=================================\" &lt;&lt; endl; cout &lt;&lt; \"Assian A New Value To P:\" &lt;&lt; endl; *p = 10; cout &lt;&lt; \"The Value That P Point Is: \" &lt;&lt; *p &lt;&lt; endl; cout &lt;&lt; \"The Value That newp Point Is: \" &lt;&lt; *newP &lt;&lt; endl; return 0;}输出结果Before Delete P:The Pointer Address Is: 0x7faa08705bf0The Value That P Point Is: 9==========================================After Delete P:The Pointer Address Is: 0x7faa08705bf0 // delete 后指针依然指向原来的地址The Value That P Point Is: 9 // 这里的值与编译器有关，有的是 0 或者随机值==========================================Create A New Poniter:The New Pointer Address Is: 0x7faa08705bf0 // 新创建的指针和之前被 delete 的指针指向同一个地址The Value That newp Point Is: 8==========================================Assian A New Value To P:The Value That P Point Is: 10 // 修改被 delete 的指针指向的值The Value That newP Point Is: 10 // 也会修改新创建的指针指向的值从上面可以看出，delete 指针只是会释放指针指向的空间，但是不会删除指针本身。当紧接着创建一个新指针的时候，编译器会把刚刚回收的空间给新的指针，这样新旧指针就指向同一个地址，进而修改那个已经 被删掉 的指针 P 指向的值的时候也会改变新指针指向的值。所以，在 delete 一个指针后一定要手动置为 NULL 。" }, { "title": "macOS 使用 Homebrew 在线安装 NTFS / EXT4 支持", "url": "/posts/macos-homebrew-install-ntfs-ext/", "categories": "Macos", "tags": "Homebrew, ntfs, ext", "date": "2021-11-18 11:18:11 +0800", "snippet": "因为 ntfs-3g、ext4fuse 等软件依赖的 macFUSE 不是开源软件，在使用 Homebrew 安装这些软件的时候提示 disable! date: \"2021-04-08\", because: \"requires closed-source macFUSE\"，导致软件无法安装。下面解决方法以 ext4fuse 为例： 执行 vi `brew formula ext4fuse` 找到下面的语句用 # 注释掉并保存退出 on_macos do disable! date: \"2021-04-08\", because: \"requires closed-source macFUSE\"end 执行 brew install ext4fuse 进行安装即可 ntfs-3g、ext2fuse、ifuse 等软件遇到相同问题时的解决方法也一样，找到对应的文件后将这三条语句注释掉即可正常安装。" }, { "title": "Net Tools VS Iproute2", "url": "/posts/net-tools-vs-iproute2/", "categories": "Linux", "tags": "iproute, net-tools", "date": "2021-11-11 11:11:11 +0800", "snippet": "后面尽量使用 Iproute2" }, { "title": "Swift warning: 'windows' was deprecated in iOS 15.0", "url": "/posts/swift-windows-was-deprecated-in-iOS15/", "categories": "Swift", "tags": "iOS", "date": "2021-10-30 11:11:11 +0800", "snippet": "import SwiftUIextension UIApplication { var keyWindow: UIWindow? { // Get connected scenes return UIApplication.shared.connectedScenes // Keep only active scenes, onscreen and visible to the user .filter { $0.activationState == .foregroundActive } // Keep only the first `UIWindowScene` .first(where: { $0 is UIWindowScene }) // Get its associated windows .flatMap({ $0 as? UIWindowScene })?.windows // Finally, keep only the key window .first(where: \\.isKeyWindow) }}/* From: https://stackoverflow.com/a/68989580 Usage e.g.: let windowScene = UIApplication.shared.keyWindow?.windowScene */" }, { "title": "使用树莓派作为种子下载服务器", "url": "/posts/raspberry-pi-as-downloader/", "categories": "Linux", "tags": "树莓派, 下载器", "date": "2021-10-20 20:20:20 +0800", "snippet": "transmisson-daemon 比其他客户端使用更少的资源，非常适合服务器，还可以通过 Web 界面和终端程序进行远程控制，支持本地对等发现、完全加密、DHT、µTP、PEX 和 Magnet Link 等。首先，通过 apt 安装软件包，这里注意安装的是 transmisson-daemon：sudo apt-get updatesudo apt-get install transmisson-daemon然后修改 /etc/transmission-daemon/ 目录下的配置文件 settings.json{ \"alt-speed-down\": 50, \"alt-speed-enabled\": false, \"alt-speed-time-begin\": 540, \"alt-speed-time-day\": 127, \"alt-speed-time-enabled\": false, \"alt-speed-time-end\": 1020, \"alt-speed-up\": 50, \"bind-address-ipv4\": \"0.0.0.0\", \"bind-address-ipv6\": \"::\", \"blocklist-enabled\": false, \"blocklist-url\": \"http://www.example.com/blocklist\", \"cache-size-mb\": 4, \"dht-enabled\": true, \"download-dir\": \"/home/ubuntu/transmission\", # 下载目录 \"download-limit\": 100, \"download-limit-enabled\": 0, \"download-queue-enabled\": true, \"download-queue-size\": 5, \"encryption\": 1, \"idle-seeding-limit\": 30, \"idle-seeding-limit-enabled\": false, \"incomplete-dir\": \"/home/ubuntu/transmission\", # 下载未完成目录 \"incomplete-dir-enabled\": true, \"lpd-enabled\": false, \"max-peers-global\": 200, \"message-level\": 1, \"peer-congestion-algorithm\": \"\", \"peer-id-ttl-hours\": 6, \"peer-limit-global\": 200, \"peer-limit-per-torrent\": 50, \"peer-port\": 51413, \"peer-port-random-high\": 65535, \"peer-port-random-low\": 49152, \"peer-port-random-on-start\": false, \"peer-socket-tos\": \"default\", \"pex-enabled\": true, \"port-forwarding-enabled\": false, \"preallocation\": 1, \"prefetch-enabled\": true, \"queue-stalled-enabled\": true, \"queue-stalled-minutes\": 30, \"ratio-limit\": 2, \"ratio-limit-enabled\": false, \"rename-partial-files\": true, \"rpc-authentication-required\": true, \"rpc-bind-address\": \"0.0.0.0\", \"rpc-enabled\": true, \"rpc-host-whitelist\": \"\", \"rpc-host-whitelist-enabled\": true, \"rpc-password\": \"{f3052668aaa8487e22c777327ad83dc79ed25ff6mhRGXhjC\", # 这里设置 web 访问的秘密，设置成明文，重新启动后会自动变成密文 \"rpc-port\": 9091, # web 访问端口 \"rpc-url\": \"/transmission/\", \"rpc-username\": \"ubuntu\", # web 访问用户名 \"rpc-whitelist\": \"*.*.*.*\", \"rpc-whitelist-enabled\": true, \"scrape-paused-torrents-enabled\": true, \"script-torrent-done-enabled\": false, \"script-torrent-done-filename\": \"\", \"seed-queue-enabled\": false, \"seed-queue-size\": 10, \"speed-limit-down\": 2048, \"speed-limit-down-enabled\": false, \"speed-limit-up\": 5, \"speed-limit-up-enabled\": true, \"start-added-torrents\": true, \"trash-original-torrent-files\": false, \"umask\": 0, # 下载目录权限设置为 777 \"upload-limit\": 100, \"upload-limit-enabled\": 0, \"upload-slots-per-torrent\": 14, \"utp-enabled\": true # 允许 web 访问}修改完成后保存并启动服务sudo systemctl start transmission-daemon.service之后在浏览器中访问 raspberry-ip:9091 进去管理界面" }, { "title": "Swift 全角半角转换", "url": "/posts/swift-full-half-width-conversion/", "categories": "Swift", "tags": "字符", "date": "2021-10-10 10:10:10 +0800", "snippet": "import Foundationextension String { // 全角字符串转为半角字符串 public var halfwidthString: String { let text:CFMutableString = NSMutableString(string: self) as CFMutableString CFStringTransform(text, nil, kCFStringTransformFullwidthHalfwidth, false) return text as String } // 半角字符串转为全角字符串 public var fullwidthString: String { let text:CFMutableString = NSMutableString(string: self) as CFMutableString CFStringTransform(text, nil, kCFStringTransformFullwidthHalfwidth, true) return text as String }}其他类型的字符串转换类似，具体可查阅 官方文档 。" }, { "title": "上海异地换驾驶证", "url": "/posts/%E4%B8%8A%E6%B5%B7%E5%BC%82%E5%9C%B0%E6%8D%A2%E9%A9%BE%E9%A9%B6%E8%AF%81/", "categories": "闲谈", "tags": "上海, 驾驶证", "date": "2021-09-14 17:07:07 +0800", "snippet": "记录一下，方便后用需要带的物品 身份证 旧驾驶证 现金 100 元过程 到上海交管所三分所。地图导航过去就可以了，挺绕的。异地在上海换驾驶证只能去二三四分所，不能到交警大队，或者也可以选择警医邮。 直接找到4号楼，去侧门，根据指示牌上楼。 到二楼后继续往里走一小段，有一个窗口，在这里登记个人信息，需要用到身份证和旧驾驶证，并上交100元的照相和体检费。 交完钱之后别忘了拿身份证和旧的驾驶证，然后往前走1米，左手边有个小屋，进去拍照。 拍完照出来后在拍照室左边有个自动相片打印机，等一会儿相片出来取走照片。 拿着照片去对面相距3米的体检室体检。 体检会问身高体重，然后测一下色盲和视力，很快结束。 体检完出门正前方2米有人在收照片，把照片给他就行，他会剪一张下来和用不到的两张一起给你，这张剪下来的要贴在新驾驶证上。 拿着照片往前走3米，有个自助交工本费的机器，扫码付费10元，支付宝、微信、银联都支持，也可以到下面提到的人工窗口那里交现金。 交完钱后拿着回执单往右走3米就是人工窗口，把回执单和剪下来的那张照片给工作人员，他就会打印新的驾驶证给你。 最后根据指示牌下楼回家，人不多的话整个过程不超过20分钟。 " }, { "title": "Welcome Home CR7", "url": "/posts/welcome-home-cr7/", "categories": "闲谈", "tags": "C罗", "date": "2021-08-28 00:07:07 +0800", "snippet": "2021 年 8 月 28 日凌晨，曼联官宣 C 罗时隔 12 年回归" } ]
